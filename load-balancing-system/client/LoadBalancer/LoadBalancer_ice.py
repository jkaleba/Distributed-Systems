# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `LoadBalancer.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module LoadBalancer
_M_LoadBalancer = Ice.openModule('LoadBalancer')
__name__ = 'LoadBalancer'

_M_LoadBalancer._t_Echo = IcePy.defineValue('::LoadBalancer::Echo', Ice.Value, -1, (), False, True, None, ())

if 'EchoPrx' not in _M_LoadBalancer.__dict__:
    _M_LoadBalancer.EchoPrx = Ice.createTempClass()
    class EchoPrx(Ice.ObjectPrx):

        def echoString(self, msg, context=None):
            return _M_LoadBalancer.Echo._op_echoString.invoke(self, ((msg, ), context))

        def echoStringAsync(self, msg, context=None):
            return _M_LoadBalancer.Echo._op_echoString.invokeAsync(self, ((msg, ), context))

        def begin_echoString(self, msg, _response=None, _ex=None, _sent=None, context=None):
            return _M_LoadBalancer.Echo._op_echoString.begin(self, ((msg, ), _response, _ex, _sent, context))

        def end_echoString(self, _r):
            return _M_LoadBalancer.Echo._op_echoString.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_LoadBalancer.EchoPrx.ice_checkedCast(proxy, '::LoadBalancer::Echo', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_LoadBalancer.EchoPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::LoadBalancer::Echo'
    _M_LoadBalancer._t_EchoPrx = IcePy.defineProxy('::LoadBalancer::Echo', EchoPrx)

    _M_LoadBalancer.EchoPrx = EchoPrx
    del EchoPrx

    _M_LoadBalancer.Echo = Ice.createTempClass()
    class Echo(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::LoadBalancer::Echo')

        def ice_id(self, current=None):
            return '::LoadBalancer::Echo'

        @staticmethod
        def ice_staticId():
            return '::LoadBalancer::Echo'

        def echoString(self, msg, current=None):
            raise NotImplementedError("servant method 'echoString' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_LoadBalancer._t_EchoDisp)

        __repr__ = __str__

    _M_LoadBalancer._t_EchoDisp = IcePy.defineClass('::LoadBalancer::Echo', Echo, (), None, ())
    Echo._ice_type = _M_LoadBalancer._t_EchoDisp

    Echo._op_echoString = IcePy.Operation('echoString', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())

    _M_LoadBalancer.Echo = Echo
    del Echo

_M_LoadBalancer._t_Calculator = IcePy.defineValue('::LoadBalancer::Calculator', Ice.Value, -1, (), False, True, None, ())

if 'CalculatorPrx' not in _M_LoadBalancer.__dict__:
    _M_LoadBalancer.CalculatorPrx = Ice.createTempClass()
    class CalculatorPrx(Ice.ObjectPrx):

        def add(self, a, b, context=None):
            return _M_LoadBalancer.Calculator._op_add.invoke(self, ((a, b), context))

        def addAsync(self, a, b, context=None):
            return _M_LoadBalancer.Calculator._op_add.invokeAsync(self, ((a, b), context))

        def begin_add(self, a, b, _response=None, _ex=None, _sent=None, context=None):
            return _M_LoadBalancer.Calculator._op_add.begin(self, ((a, b), _response, _ex, _sent, context))

        def end_add(self, _r):
            return _M_LoadBalancer.Calculator._op_add.end(self, _r)

        def multiply(self, a, b, context=None):
            return _M_LoadBalancer.Calculator._op_multiply.invoke(self, ((a, b), context))

        def multiplyAsync(self, a, b, context=None):
            return _M_LoadBalancer.Calculator._op_multiply.invokeAsync(self, ((a, b), context))

        def begin_multiply(self, a, b, _response=None, _ex=None, _sent=None, context=None):
            return _M_LoadBalancer.Calculator._op_multiply.begin(self, ((a, b), _response, _ex, _sent, context))

        def end_multiply(self, _r):
            return _M_LoadBalancer.Calculator._op_multiply.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_LoadBalancer.CalculatorPrx.ice_checkedCast(proxy, '::LoadBalancer::Calculator', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_LoadBalancer.CalculatorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::LoadBalancer::Calculator'
    _M_LoadBalancer._t_CalculatorPrx = IcePy.defineProxy('::LoadBalancer::Calculator', CalculatorPrx)

    _M_LoadBalancer.CalculatorPrx = CalculatorPrx
    del CalculatorPrx

    _M_LoadBalancer.Calculator = Ice.createTempClass()
    class Calculator(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::LoadBalancer::Calculator')

        def ice_id(self, current=None):
            return '::LoadBalancer::Calculator'

        @staticmethod
        def ice_staticId():
            return '::LoadBalancer::Calculator'

        def add(self, a, b, current=None):
            raise NotImplementedError("servant method 'add' not implemented")

        def multiply(self, a, b, current=None):
            raise NotImplementedError("servant method 'multiply' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_LoadBalancer._t_CalculatorDisp)

        __repr__ = __str__

    _M_LoadBalancer._t_CalculatorDisp = IcePy.defineClass('::LoadBalancer::Calculator', Calculator, (), None, ())
    Calculator._ice_type = _M_LoadBalancer._t_CalculatorDisp

    Calculator._op_add = IcePy.Operation('add', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    Calculator._op_multiply = IcePy.Operation('multiply', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), ())

    _M_LoadBalancer.Calculator = Calculator
    del Calculator

# End of module LoadBalancer
